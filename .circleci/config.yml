##---------------------------------------------------------------------------##
# Spring Batch Master Class
##---------------------------------------------------------------------------##
# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
# TO Revisit:
# https://github.com/AnySoftKeyboard/AnySoftKeyboard/blob/master/circle.yml
##---------------------------------------------------------------------------##
version: 2
jobs:
##---------------------------------------------------------------------------##

  build:

    working_directory: ~/tmp/workspace

    environment:
      _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
      BASE_DIR: "./StudentWork/code"

    docker:
      - image: circleci/openjdk:8-jdk-browsers
        environment:
          BASE_DIR: "./StudentWork/code"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"

    steps:
      - checkout
      - run:
          name: Initialize
          command: |
            set -xu
            echo $CIRCLE_WORKING_DIRECTORY
            mkdir -p ~/junit/
            pwd
            ls -la
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "./StudentWork/code/pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: dependency:go-offline
          command: mvn dependency:go-offline
          working_directory: ./StudentWork/code
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "./StudentWork/code/pom.xml" }}


##---------------------------------------------------------------------------##

  build_core:

    working_directory: ~/tmp/workspace

    environment:
      _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
      BASE_DIR: "./StudentWork/code"
    
    docker:
      - image: circleci/openjdk:8-jdk-browsers
        environment:
          BASE_DIR: "./StudentWork/code"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"

    steps:
      - checkout
      - run:
          name: Initialize
          command: |
            set -xu
            echo $CIRCLE_WORKING_DIRECTORY
            mkdir -p ~/junit/
            ls -la
#            find . -maxdepth 2 -exec du -ms {} \; | sort -rn | head -n 15
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "./StudentWork/code/pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Verify the SECTION CORE with codeQuality
          command: mvn verify -PcodeQuality
          working_directory: ./StudentWork/code/spring_batch_section_core
      - run:
          name: Save test results
          command: |
            set -xu
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - run:
          name: Save Coverage results
          command: |
            set -xu
            find . -type f -regex ".*/target/jacoco/jacoco.xml" -exec cp {} ~/junit/ \;
            bash <(curl -s https://codecov.io/bash)

##---------------------------------------------------------------------------##
  build_flows:

    working_directory: ~/tmp/workspace

    environment:
      _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
      BASE_DIR: "./StudentWork/code"
    
    docker:
      - image: circleci/openjdk:8-jdk-browsers
        environment:
          BASE_DIR: "./StudentWork/code"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"

    steps:
      - checkout
      - run:
          name: Initialize
          command: |
            set -xu
            echo $CIRCLE_WORKING_DIRECTORY
            mkdir -p ~/junit/
            ls -la
      - run:
          name: Verify the SECTION CORE with codeQuality
          command: mvn verify -PcodeQuality
          working_directory: ./StudentWork/code/spring_batch_section_flows
      - run:
          name: Save test results
          command: |
            set -xu
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - run:
          name: Save Coverage results
          command: |
            set -xu
            find . -type f -regex ".*/target/jacoco/jacoco.xml" -exec cp {} ~/junit/ \;
            bash <(curl -s https://codecov.io/bash)

##---------------------------------------------------------------------------##
  build_scaling:

    working_directory: ~/tmp/workspace

    environment:
      _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
      BASE_DIR: "./StudentWork/code"
    
    docker:
      - image: circleci/openjdk:8-jdk-browsers
        environment:
          BASE_DIR: "./StudentWork/code"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"

    steps:
      - checkout
      - run:
          name: Initialize
          command: |
            set -xu
            echo $CIRCLE_WORKING_DIRECTORY
            mkdir -p ~/junit/
            ls -la
#            find . -maxdepth 2 -exec du -ms {} \; | sort -rn | head -n 15
      - run:
          name: Verify the SECTION CORE with codeQuality
          command: mvn verify -PcodeQuality
          working_directory: ./StudentWork/code/spring_batch_section_scaling
      - run:
          name: Save test results
          command: |
            set -xu
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - run:
          name: Save Coverage results
          command: |
            set -xu
            find . -type f -regex ".*/target/jacoco/jacoco.xml" -exec cp {} ~/junit/ \;
            bash <(curl -s https://codecov.io/bash)


##---------------------------------------------------------------------------##
workflows:
  version: 2
  build_each_module:
    jobs:
      - build
      - build_core:
          requires:
            - build
      - build_flows:
          requires:
            - build
      - build_scaling:
          requires:
            - build

##---------------------------------------------------------------------------##
## The End... ##
##---------------------------------------------------------------------------##
